{
  "name": "robotcode",
  "displayName": "RobotCode - Robot Framework Support",
  "description": "Robot Framework IntelliSense, linting, test execution and debugging, code formatting, refactoring, and many more",
  "icon": "images/icon.png",
  "publisher": "d-biehl",
  "version": "0.83.3",
  "author": {
    "name": "Daniel Biehl",
    "url": "https://github.com/robotcodedev/"
  },
  "homepage": "https://robotcode.io",
  "repository": {
    "type": "git",
    "url": "https://github.com/robotcodedev/robotcode"
  },
  "bugs": {
    "url": "https://github.com/robotcodedev/robotcode/issues"
  },
  "qna": "https://github.com/robotcodedev/robotcode/discussions/categories/q-a",
  "engines": {
    "vscode": "^1.86.0"
  },
  "categories": [
    "Programming Languages",
    "Testing",
    "Debuggers",
    "Formatters",
    "Linters"
  ],
  "keywords": [
    "Test",
    "Testing",
    "RobotFramework",
    "Robot Framework",
    "Robot",
    "Keyword Driven",
    "Data Driven",
    "Acceptance Testing",
    "Acceptance Test Driven Development",
    "Test Driven",
    "Behavior Driven Development",
    "BDD",
    "Behavior Driven Testing",
    "BDT",
    "Robotic Process Automation",
    "RPA"
  ],
  "featureFlags": {
    "usingNewInterpreterStorage": true
  },
  "capabilities": {
    "untrustedWorkspaces": {
      "supported": "limited",
      "description": "Only Partial IntelliSense is supported."
    },
    "virtualWorkspaces": {
      "supported": "limited",
      "description": "Only Partial IntelliSense supported."
    }
  },
  "activationEvents": [
    "workspaceContains:**/*.{robot,resource}",
    "onDebug",
    "onDebugResolve:robotcode",
    "onDebugInitialConfigurations",
    "onDebugDynamicConfigurations:robotcode"
  ],
  "galleryBanner": {
    "theme": "dark",
    "color": "#111111"
  },
  "sponsor": {
    "url": "https://opencollective.com/robotcode"
  },
  "funding": [
    {
      "type": "opencollective",
      "url": "https://opencollective.com/robotcode"
    }
  ],
  "main": "./out/extension.js",
  "contributes": {
    "markdown.markdownItPlugins": true,
    "icons": {
      "robotcode-robot": {
        "description": "RobotFramework Icon",
        "default": {
          "fontPath": "./icons/robot.woff",
          "fontCharacter": "\\E900"
        }
      }
    },
    "views": {
      "explorer": [
        {
          "id": "robotcode.keywordsTreeView",
          "name": "Keywords",
          "contextualTitle": "Robot Framework",
          "icon": "icons/svg/robot_light.svg",
          "when": "resourceLangId == robotframework"
        }
      ]
    },
    "tomlValidation": [
      {
        "fileMatch": "robot.toml",
        "url": "https://raw.githubusercontent.com/robotcodedev/robotcode/main/etc/robot.toml.json"
      },
      {
        "fileMatch": ".robot.toml",
        "url": "https://raw.githubusercontent.com/robotcodedev/robotcode/main/etc/robot.toml.json"
      }
    ],
    "configurationDefaults": {
      "[robotframework]": {
        "editor.wordBasedSuggestions": "off",
        "editor.semanticHighlighting.enabled": true,
        "editor.inlayHints.enabled": "offUnlessPressed",
        "editor.quickSuggestions": {
          "strings": "on"
        }
      },
      "editor.tokenColorCustomizations": {
        "textMateRules": [
          {
            "scope": "comment.line.configuration.robotframework",
            "settings": {
              "fontStyle": "bold"
            }
          },
          {
            "scope": "entity.name.function.keyword-call.inner.robotframework",
            "settings": {
              "fontStyle": "italic"
            }
          },
          {
            "scope": "string.unquoted.embeddedArgument.robotframework",
            "settings": {
              "fontStyle": "italic"
            }
          },
          {
            "scope": "entity.name.function.keyword-call.robotframework",
            "settings": {}
          },
          {
            "scope": "entity.name.function.testcase.name.robotframework",
            "settings": {
              "fontStyle": "bold italic"
            }
          },
          {
            "scope": "entity.name.function.keyword.name.robotframework",
            "settings": {
              "fontStyle": "bold italic"
            }
          },
          {
            "scope": "variable.name.readwrite.robotframework",
            "settings": {}
          },
          {
            "scope": "keyword.control.import.robotframework",
            "settings": {
              "fontStyle": "italic"
            }
          },
          {
            "scope": "keyword.other.header.settings.robotframework",
            "settings": {
              "fontStyle": "bold underline"
            }
          },
          {
            "scope": "keyword.other.header.variable.robotframework",
            "settings": {
              "fontStyle": "bold underline"
            }
          },
          {
            "scope": "keyword.other.header.testcase.robotframework",
            "settings": {
              "fontStyle": "bold underline"
            }
          },
          {
            "scope": "keyword.other.header.task.robotframework",
            "settings": {
              "fontStyle": "bold underline"
            }
          },
          {
            "scope": "keyword.other.header.keyword.robotframework",
            "settings": {
              "fontStyle": "bold underline"
            }
          },
          {
            "scope": "keyword.other.header.comment.robotframework",
            "settings": {
              "fontStyle": "bold italic underline"
            }
          },
          {
            "scope": "string.unquoted.character.escape.robotframework",
            "settings": {}
          }
        ]
      },
      "editor.semanticTokenColorCustomizations": {
        "rules": {
          "*.documentation:robotframework": {
            "fontStyle": "italic"
          }
        }
      }
    },
    "semanticTokenModifiers": [
      {
        "id": "builtin",
        "description": "built in library, keyword or variable"
      }
    ],
    "semanticTokenScopes": [
      {
        "language": "robotframework",
        "scopes": {
          "header": [
            "keyword.other.header.robotframework"
          ],
          "headerComment": [
            "keyword.other.header.comment.robotframework"
          ],
          "headerKeyword": [
            "keyword.other.header.keyword.robotframework"
          ],
          "headerSettings": [
            "keyword.other.header.settings.robotframework"
          ],
          "headerVariable": [
            "keyword.other.header.variable.robotframework"
          ],
          "headerTestcase": [
            "keyword.other.header.testcase.robotframework"
          ],
          "headerTask": [
            "keyword.other.header.task.robotframework"
          ],
          "setting": [
            "keyword.control.settings.robotframework"
          ],
          "settingImport": [
            "keyword.control.import.robotframework"
          ],
          "testcaseName": [
            "entity.name.function.testcase.name.robotframework"
          ],
          "keywordName": [
            "entity.name.function.keyword.name.robotframework"
          ],
          "controlFlow": [
            "keyword.control.flow.robotframework"
          ],
          "forSeparator": [
            "keyword.operator.for.robotframework"
          ],
          "argument": [
            "string.unquoted.argument.robotframework"
          ],
          "embeddedArgument": [
            "string.unquoted.embeddedArgument.robotframework"
          ],
          "variable": [
            "variable.name.readwrite.robotframework"
          ],
          "variableExpression": [
            "variable.expression.readwrite.robotframework"
          ],
          "keywordCall": [
            "entity.name.function.keyword-call.robotframework"
          ],
          "keywordCallInner": [
            "entity.name.function.keyword-call.inner.robotframework"
          ],
          "nameCall": [
            "entity.name.function.keyword-call.robotframework"
          ],
          "bddPrefix": [
            "keyword.modifier.bdd-prefix.robotframework"
          ],
          "continuation": [
            "keyword.operator.continuation.robotframework"
          ],
          "separator": [
            "keyword.operator.terminator.robotframework"
          ],
          "terminator": [
            "keyword.operator.terminator.robotframework"
          ],
          "variableBegin": [
            "punctuation.definition.variable.begin.robotframework"
          ],
          "variableEnd": [
            "punctuation.definition.variable.end.robotframework"
          ],
          "escape": [
            "constant.character.escape.robotframework"
          ],
          "namespace": [
            "entity.other.namespace.robotframework"
          ],
          "error": [
            "invalid.illegal.robotframework"
          ],
          "config": [
            "comment.line.configuration.robotframework"
          ],
          "namedArgument": [
            "variable.parameter.function-call.robotframework"
          ],
          "var": [
            "storage.type.robotframework"
          ],
          "documentation": [
            "markup.robotframework"
          ]
        }
      }
    ],
    "languages": [
      {
        "id": "robotframework",
        "aliases": [
          "Robot Framework",
          "robotframework"
        ],
        "icon": {
          "light": "./icons/robot-light.png",
          "dark": "./icons/robot-dark.png"
        },
        "extensions": [
          ".robot",
          ".resource"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "robotframework-injection"
      }
    ],
    "grammars": [
      {
        "language": "robotframework",
        "scopeName": "source.robotframework",
        "path": "./syntaxes/robotframework.tmLanguage.json",
        "tokenTypes": {
          "string.unquoted.argument.robotframework": "other",
          "variable.expression.robotframework": "other"
        },
        "unbalancedBracketScopes": [
          "comment.robotframework",
          "comment"
        ]
      },
      {
        "language": "robotframework-injection",
        "scopeName": "markdown.robotframework.codeblock",
        "path": "./syntaxes/codeblock_robotframework.tmLanguage.json",
        "injectTo": [
          "text.html.markdown"
        ],
        "embeddedLanguages": {
          "meta.embedded.block.robotframework": "robotframework"
        }
      }
    ],
    "keybindings": [
      {
        "key": "tab",
        "command": "type",
        "args": {
          "text": "    "
        },
        "when": "editorTextFocus && editorLangId == robotframework && config.robotcode.editor.4SpacesTab && !editorHasSelection && !inSnippetMode && !suggestWidgetVisible && !inlineSuggestionVisible"
      }
    ],
    "configuration": [
      {
        "title": "General",
        "type": "object",
        "properties": {
          "robotcode.extraArgs": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Specifies extra arguments to be passed to the `robotcode` command line tool (i.e.: [`--log`, `--log-level=TRACE`, `--log-calls`]).",
            "scope": "resource"
          },
          "robotcode.profiles": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Specifies the execution profiles to be used. Corresponds to the '--profile' option of `robotcode` commandline tool.",
            "scope": "resource"
          },
          "robotcode.python": {
            "type": "string",
            "default": "",
            "description": "Specifies the python executable to be used for RobotCode. If no path is specified, try to get it from \"python\" extension.",
            "scope": "resource"
          }
        }
      },
      {
        "title": "Editing",
        "type": "object",
        "properties": {
          "robotcode.editor.4SpacesTab": {
            "type": "boolean",
            "default": true,
            "description": "If actived insert 4 spaces if TAB is pressed."
          },
          "robotcode.completion.filterDefaultLanguage": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Filter default language (English) for completion if there is another language defined.",
            "scope": "resource"
          },
          "robotcode.completion.headerStyle": {
            "type": "string",
            "default": null,
            "markdownDescription": "Defines the header style format. If not defined ```*** {name} ***``` is used.",
            "scope": "resource"
          },
          "robotcode.inlayHints.parameterNames": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable/disable inlay hints for parameter names.",
            "scope": "resource"
          },
          "robotcode.inlayHints.namespaces": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable/disable inlay hints for namespaces.",
            "scope": "resource"
          }
        }
      },
      {
        "title": "Run",
        "type": "object",
        "properties": {
          "robotcode.run.openOutputAfterRun": {
            "type": "string",
            "enum": [
              "none",
              "report",
              "log"
            ],
            "enumDescriptions": [
              "Do not open anyting",
              "Open the report html file.",
              "Open the log.html file."
            ],
            "default": "none",
            "description": "Defines if the report or log file should be opened after a run.",
            "scope": "resource"
          }
        }
      },
      {
        "title": "Debug",
        "type": "object",
        "properties": {
          "robotcode.debugLauncher.mode": {
            "type": "string",
            "default": "stdio",
            "description": "Specifies the mode the debug launcher is started.",
            "enum": [
              "stdio",
              "tcp",
              "pipe-server"
            ],
            "markdownEnumDescriptions": [
              "The debug launcher communicates via stdio streams.",
              "The debug launcher communicates via tcp streams.",
              "The debug launcher communicates via pipe streams. **This maybe not work on Windows and Python versions < 3.10**."
            ],
            "scope": "resource"
          },
          "robotcode.debugLauncher.tcpPort": {
            "type": "number",
            "default": 0,
            "description": "If the port is specified, connect to the debug adapter previously started at the given port.",
            "scope": "resource"
          },
          "robotcode.debugLauncher.host": {
            "type": "string",
            "default": null,
            "description": "If the host is specified, connect to the debug adapter previously started at the given host.",
            "scope": "resource"
          },
          "robotcode.debugLauncher.args": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Specifies the arguments to be passed to the debug adapter.",
            "scope": "resource"
          },
          "robotcode.debug.defaultConfiguration": {
            "type": "object",
            "default": {},
            "description": "Specifies the default configuration to run or debug robot tests.",
            "scope": "resource"
          },
          "robotcode.debug.attachPython": {
            "type": "boolean",
            "description": "Attach also the python debugger if a robot test starts.",
            "default": false,
            "scope": "resource"
          },
          "robotcode.debug.outputMessages": {
            "type": "boolean",
            "description": "Output messages from robotframework in debug console.",
            "default": false,
            "scope": "resource"
          },
          "robotcode.debug.outputLog": {
            "type": "boolean",
            "description": "Output log messages from robotframework in debug console.",
            "default": true,
            "scope": "resource"
          },
          "robotcode.debug.outputTimestamps": {
            "type": "boolean",
            "description": "Include timestamps in log and output messages.",
            "default": false,
            "scope": "resource"
          },
          "robotcode.debug.groupOutput": {
            "type": "boolean",
            "description": "Group start and stop suite/test/keyword messages in debug console.",
            "default": false,
            "scope": "resource"
          },
          "robotcode.debug.useExternalDebugpy": {
            "type": "boolean",
            "description": "Use the debugpy in python environment, not from the python extension.",
            "default": false,
            "scope": "resource"
          },
          "robotcode.debug.defaultConsole": {
            "type": "string",
            "enum": [
              "internalConsole",
              "integratedTerminal",
              "externalTerminal"
            ],
            "default": "integratedTerminal",
            "enumDescriptions": [
              "No terminal (pipes the output to the client debug console).",
              "Use terminal integrated in client.",
              "External terminal (configured in user settings)."
            ],
            "description": "Default setting for where to launch the debug target: internal console, integrated terminal, or external terminal.",
            "scope": "resource"
          }
        }
      },
      {
        "title": "Robot",
        "type": "object",
        "properties": {
          "robotcode.robot.args": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Specifies the arguments to be passed to robot.",
            "scope": "resource"
          },
          "robotcode.robot.paths": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Specifies the paths where robot/robotcode should discover tests. Corresponds to the `paths` argument of __robot__.",
            "scope": "resource"
          },
          "robotcode.robot.pythonPath": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Specifies additional python paths for robotframework. Corresponds to the `--pythonpath` option of __robot__.",
            "scope": "resource"
          },
          "robotcode.robot.env": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "default": {},
            "description": "Specifies the environment variables for robotframework.",
            "scope": "resource"
          },
          "robotcode.robot.languages": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Specifies the supported language(s) that can be used to write _robot_ files. Corresponds to the `--language lang *` option of __robot__.",
            "scope": "resource"
          },
          "robotcode.robot.variables": {
            "type": "object",
            "default": {},
            "additionalProperties": {
              "type": "string"
            },
            "markdownDescription": "Specifies the variables for robotframework. Corresponds to the `--variable name:value` option of __robot__.",
            "scope": "resource"
          },
          "robotcode.robot.variableFiles": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Specifies the variable files for robotframework. Corresponds to the `--variablefile` option of __robot__.",
            "scope": "resource"
          },
          "robotcode.robot.outputDir": {
            "type": "string",
            "default": "",
            "markdownDescription": "Specifies the output directory where robotframework saves output files. Corresponds to the `--outputdir` option of __robot__.",
            "scope": "resource"
          },
          "robotcode.robot.mode": {
            "type": "string",
            "enum": [
              "default",
              "rpa",
              "norpa"
            ],
            "markdownEnumDescriptions": [
              "Mode is got from test/task header in data files.",
              "Turn on the generic automation mode. Corresponds to the `--rpa` option of __robot__.",
              "Force test automation mode. Corresponds to the `--norpa` option of __robot__."
            ],
            "markdownDescription": "Specifies robot execution mode. Corresponds to the `--rpa` or `--norpa` option of __robot__.",
            "default": "default",
            "scope": "resource"
          }
        }
      },
      {
        "title": "Analysis",
        "type": "object",
        "properties": {
          "robotcode.analysis.cache.saveLocation": {
            "type": "string",
            "enum": [
              "workspaceStorage",
              "workspaceFolder"
            ],
            "enumDescriptions": [
              "Save cached data into workspace folder.",
              "Save cached data into workspace storage."
            ],
            "description": "Specifies where cached data is saved.",
            "default": "workspaceStorage",
            "scope": "resource"
          },
          "robotcode.analysis.cache.ignoredLibraries": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Specifies the library names that should not be cached. This is useful if you have a dynamic or hybrid library that has different keywords depending on the arguments. You can specify a glob pattern that matches the library name or the source file. \n\nExamples:\n- `**/mylibfolder/mylib.py`\n- `MyLib`\n- `mylib.subpackage.subpackage` \n\nFor robot framework internal libraries, you have to specify the full module name like `robot.libraries.Remote`.\n\nIf you change this setting, you may need to run the command `RobotCode: Clear Cache and Restart Language Servers`.",
            "scope": "resource"
          },
          "robotcode.analysis.cache.ignoredVariables": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Specifies the variable files that should not be cached. This is useful if you have a dynamic or hybrid variable files that has different variables depending on the arguments. You can specify a glob pattern that matches the variable module name or the source file. \n\nExamples:\n- `**/variables/myvars.py`\n- `MyVariables`\n- `myvars.subpackage.subpackage` \n\nIf you change this setting, you may need to run the command `RobotCode: Clear Cache and Restart Language Servers`.",
            "scope": "resource"
          },
          "robotcode.analysis.cache.ignoreArgumentsForLibrary": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Specifies a list of libraries for which arguments will be ignored during analysis. This is usefull if you have library that gets variables from a python file as arguments that contains complex data like big dictionaries or complex objects that **RobotCode** can't handle. You can specify a glob pattern that matches the library name or the source file. \n\nExamples:\n- `**/mylibfolder/mylib.py`\n- `MyLib`\n- `mylib.subpackage.subpackage` \n\nIf you change this setting, you may need to run the command `RobotCode: Clear Cache and Restart Language Servers`.\n\n _Ensure your library functions correctly without arguments e.g. by defining default values for all arguments._",
            "scope": "resource"
          },
          "robotcode.analysis.robot.globalLibrarySearchOrder": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Specifies a global [search order](https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#specifying-explicit-priority-between-libraries-and-resources) for libraries and resources. This is usefull when you have libraries containing keywords with the same name. **RobotCode** is unable to analyze the library search order in a file specified with [`Set Library Search Order`](https://robotframework.org/robotframework/latest/libraries/BuiltIn.html#Set%20Library%20Search%20Order), so you can define a global order here. Just make sure to call the `Set Library Search Order` keyword somewhere in your robot file or internally in your library.",
            "scope": "resource"
          },
          "robotcode.analysis.findUnusedReferences": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Find and reports unused keyword and variable references.",
            "scope": "resource"
          },
          "robotcode.analysis.diagnosticMode": {
            "type": "string",
            "enum": [
              "openFilesOnly",
              "workspace"
            ],
            "default": "openFilesOnly",
            "enumDescriptions": [
              "Analyzes and reports problems only on open files.",
              "Analyzes and reports problems on all files in the workspace."
            ],
            "description": "Analysis mode for diagnostics.",
            "scope": "resource"
          },
          "robotcode.analysis.progressMode": {
            "type": "string",
            "enum": [
              "off",
              "simple",
              "detailed"
            ],
            "default": "off",
            "enumDescriptions": [
              "Show only simple progress messages.",
              "Show detailed progress messages. Displays the filenames that are currently being analyzed."
            ],
            "description": "Progress mode for diagnostics.",
            "scope": "resource"
          },
          "robotcode.analysis.referencesCodeLens": {
            "type": "boolean",
            "default": false,
            "description": "Enable/disable references CodeLens for RobotFramework files."
          }
        }
      },
      {
        "title": "Linting - Robocop",
        "type": "object",
        "properties": {
          "robotcode.robocop.enabled": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enables 'robocop' code analysis, if installed. See [robocop](https://github.com/MarketSquare/robotframework-robocop)",
            "scope": "resource"
          },
          "robotcode.robocop.include": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Include specified 'robocop' rules. You can define rule by its name or id. Glob patterns are supported",
            "scope": "resource"
          },
          "robotcode.robocop.exclude": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Exlude specified 'robocop' rules. You can define rule by its name or id. Glob patterns are supported",
            "scope": "resource"
          },
          "robotcode.robocop.configurations": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "description": "Configure 'robocop' checker with parameter value.",
            "scope": "resource"
          }
        }
      },
      {
        "title": "Formatting - Tidy",
        "type": "object",
        "properties": {
          "robotcode.robotidy.enabled": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enables 'robotidy' code formatting, if installed. See [robotidy](https://github.com/MarketSquare/robotframework-tidy)",
            "scope": "resource"
          },
          "robotcode.robotidy.ignoreGitDir": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Ignore .git directories when searching for the default configuration file. Corresponds to the `--ignore-git-dir` of _robotidy_ See [robotidy](https://github.com/MarketSquare/robotframework-tidy)",
            "scope": "resource"
          },
          "robotcode.robotidy.config": {
            "type": "string",
            "default": "",
            "markdownDescription": "Read configuration from FILE path. Corresponds to the `--config` of _robotidy_ See [robotidy](https://github.com/MarketSquare/robotframework-tidy)",
            "scope": "resource"
          }
        }
      },
      {
        "title": "Workspace",
        "type": "object",
        "properties": {
          "robotcode.workspace.excludePatterns": {
            "type": "array",
            "default": [
              "**/.git/",
              "**/.hatch/",
              "**/.venv/",
              "**/node_modules/",
              "**/.pytest_cache/",
              "**/__pycache__/",
              "**/.mypy_cache/",
              "**/.robotcode_cache/"
            ],
            "items": {
              "type": "string"
            },
            "description": "Specifies glob patterns for excluding files and folders from analysing by the language server.",
            "scope": "resource"
          }
        }
      },
      {
        "title": "Language Server",
        "type": "object",
        "properties": {
          "robotcode.languageServer.mode": {
            "type": "string",
            "default": "pipe",
            "description": "Specifies the mode the language server is started.",
            "enum": [
              "stdio",
              "pipe",
              "socket",
              "tcp"
            ],
            "scope": "resource"
          },
          "robotcode.languageServer.tcpPort": {
            "type": "number",
            "default": 0,
            "description": "If the port is specified, connect to the language server previously started at the given port.",
            "scope": "resource"
          },
          "robotcode.languageServer.extraArgs": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            },
            "markdownDescription": "Specifies extra arguments to be passed to the `robotcode language-server` command line tool (i.e.: [`--log`, `--log-level=TRACE`, `--log-calls`]).",
            "scope": "resource"
          }
        }
      },
      {
        "title": "Documentation",
        "type": "object",
        "properties": {
          "robotcode.documentationServer.startPort": {
            "type": "integer",
            "default": 3100,
            "description": "Defines the start port for the documentation server. If the port is free, this port is used, otherwise a free port is searched for."
          },
          "robotcode.documentationServer.endPort": {
            "type": "integer",
            "default": 3199,
            "description": "Defines the endport for searching a free port for the documentation server."
          },
          "robotcode.documentationServer.startOnDemand": {
            "type": "boolean",
            "default": true,
            "description": "Starts the internal HTTP server only if needed."
          }
        }
      },
      {
        "title": "Test Explorer",
        "type": "object",
        "properties": {
          "robotcode.testExplorer.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable whether Robot Framework tests and tasks are integrated into the VSCode Test/Test Explorer view.",
            "scope": "resource"
          }
        }
      }
    ],
    "commands": [
      {
        "title": "Run Current File",
        "category": "RobotCode",
        "command": "robotcode.runCurrentFile",
        "enablement": "resourceLangId == robotframework && resourceExtname == .robot || explorerResourceIsFolder",
        "icon": "$(run)"
      },
      {
        "title": "Debug Current File",
        "category": "RobotCode",
        "command": "robotcode.debugCurrentFile",
        "enablement": "resourceLangId == robotframework && resourceExtname == .robot || explorerResourceIsFolder",
        "icon": "$(debug-alt)"
      },
      {
        "title": "Restart Language Servers",
        "category": "RobotCode",
        "command": "robotcode.restartLanguageServers"
      },
      {
        "title": "Clear Cache and Restart Language Servers",
        "category": "RobotCode",
        "command": "robotcode.clearCacheRestartLanguageServers"
      },
      {
        "title": "Select Configuration Profiles",
        "category": "RobotCode",
        "command": "robotcode.selectConfigurationProfiles"
      },
      {
        "title": "Refresh",
        "command": "robotcode.keywordsTreeView.refresh",
        "enablement": "resourceLangId == robotframework && view == robotcode.keywordsTreeView",
        "icon": "$(refresh)"
      },
      {
        "title": "Insert Keyword",
        "command": "robotcode.keywordsTreeView.insertKeyword",
        "enablement": "resourceLangId == robotframework && view == robotcode.keywordsTreeView",
        "icon": "$(insert)"
      },
      {
        "title": "Show Documentation",
        "command": "robotcode.keywordsTreeView.showDocumentation",
        "enablement": "resourceLangId == robotframework && view == robotcode.keywordsTreeView",
        "icon": "$(book)"
      },
      {
        "title": "Create New File",
        "shortTitle": "Robot Framework File",
        "category": "RobotCode",
        "command": "robotcode.createNewFile"
      }
    ],
    "menus": {
      "editor/title/run": [
        {
          "command": "robotcode.runCurrentFile",
          "group": "robotcode@1",
          "when": "resourceLangId == robotframework && resourceExtname == .robot && !isInDiffEditor"
        },
        {
          "command": "robotcode.debugCurrentFile",
          "group": "robotcode@2",
          "when": "resourceLangId == robotframework && resourceExtname == .robot && !isInDiffEditor"
        }
      ],
      "editor/context": [
        {
          "command": "robotcode.runCurrentFile",
          "group": "robotcode@1",
          "when": "resourceLangId == robotframework && resourceExtname == .robot && !isInDiffEditor"
        },
        {
          "command": "robotcode.debugCurrentFile",
          "group": "robotcode@2",
          "when": "resourceLangId == robotframework && resourceExtname == .robot && !isInDiffEditor"
        }
      ],
      "view/title": [
        {
          "command": "robotcode.keywordsTreeView.refresh",
          "when": "view == robotcode.keywordsTreeView",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "robotcode.keywordsTreeView.insertKeyword",
          "when": "view == robotcode.keywordsTreeView && viewItem == keyword",
          "group": "inline"
        },
        {
          "command": "robotcode.keywordsTreeView.showDocumentation",
          "when": "view == robotcode.keywordsTreeView",
          "group": "inline"
        },
        {
          "command": "robotcode.keywordsTreeView.showDocumentation",
          "when": "view == robotcode.keywordsTreeView"
        }
      ],
      "file/newFile": [
        {
          "command": "robotcode.createNewFile",
          "group": "file",
          "when": "!virtualWorkspace"
        }
      ]
    },
    "breakpoints": [
      {
        "language": "robotframework"
      }
    ],
    "debuggers": [
      {
        "type": "robotcode",
        "label": "RobotCode",
        "languages": [
          "robotframework"
        ],
        "configurationAttributes": {
          "attach": {
            "properties": {
              "connect": {
                "label": "Attach by connecting to debugpy over a socket.",
                "properties": {
                  "host": {
                    "default": "127.0.0.1",
                    "description": "Hostname or IP address to connect to.",
                    "type": "string"
                  },
                  "port": {
                    "description": "Port to connect to.",
                    "type": "number"
                  }
                },
                "required": [
                  "port"
                ],
                "type": "object"
              },
              "host": {
                "default": "127.0.0.1",
                "description": "Hostname or IP address to connect to.",
                "type": "string"
              },
              "pathMappings": {
                "default": [],
                "items": {
                  "label": "Path mapping",
                  "properties": {
                    "localRoot": {
                      "default": "${workspaceFolder}",
                      "label": "Local source root.",
                      "type": "string"
                    },
                    "remoteRoot": {
                      "default": "",
                      "label": "Remote source root.",
                      "type": "string"
                    }
                  },
                  "required": [
                    "localRoot",
                    "remoteRoot"
                  ],
                  "type": "object"
                },
                "label": "Path mappings.",
                "type": "array"
              },
              "port": {
                "description": "Port to connect to.",
                "type": "number"
              },
              "attachPython": {
                "type": "boolean",
                "description": "Attach also the python debugger if a robot test starts.",
                "default": false
              },
              "attachPythonPort": {
                "type": "number",
                "description": "The port the python debugger (debugpy) should use.",
                "default": 5678
              },
              "pythonConfiguration": {
                "type": [
                  "object",
                  "string"
                ],
                "description": "Defines a template for the python launch configuration.",
                "default": {}
              }
            }
          },
          "launch": {
            "properties": {
              "target": {
                "type": [
                  "string",
                  "null"
                ],
                "markdownDescription": "The `.robot` file or a folder containing `.robot` files to be launched.",
                "default": "${file}"
              },
              "profiles": {
                "type": "array",
                "default": [],
                "items": {
                  "type": "string"
                },
                "markdownDescription": "Specifies the profiles to be used for execution. Corresponds to the '--profile' option of __robotcode__."
              },
              "paths": {
                "type": "array",
                "default": [],
                "items": {
                  "type": "string"
                },
                "markdownDescription": "Specifies the paths where robot should discover tests. Corresponds to the 'paths' argument of __robot__."
              },
              "args": {
                "type": "array",
                "description": "Specifies additional command line arguments passed to robot.",
                "default": []
              },
              "cwd": {
                "type": "string",
                "description": "Absolute path to the working directory of the program being debugged. Default is the root directory of the file (leave empty).",
                "default": "${workspaceFolder}"
              },
              "env": {
                "additionalProperties": {
                  "type": "string"
                },
                "type": "object",
                "description": "Environment variables defined as a key value pair.",
                "default": []
              },
              "console": {
                "type": "string",
                "enum": [
                  "internalConsole",
                  "integratedTerminal",
                  "externalTerminal"
                ],
                "enumDescriptions": [
                  "No terminal (pipes the output to the client debug console).",
                  "Use terminal integrated in client.",
                  "External terminal (configured in user settings)."
                ],
                "description": "Where to launch the debug target: internal console, integrated terminal, or external terminal.",
                "default": "integratedTerminal"
              },
              "dryRun": {
                "type": "boolean",
                "markdownDescription": "Verifies test data and runs tests so that library keywords are not executed. Corresponds to the `--dryrun` option of __robot__.",
                "default": false
              },
              "python": {
                "type": "string",
                "description": "Specifies the python interpreter to use. If not specified, the python interpreter defined for the extension is used.",
                "default": null
              },
              "robotPythonPath": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "markdownDescription": "Specifies additional python paths for robotframework. Corresponds to the `--pythonpath` option of __robot__.",
                "default": []
              },
              "attachPython": {
                "type": "boolean",
                "description": "Attach also the python debugger if a robot test starts.",
                "default": false
              },
              "attachPythonPort": {
                "type": "number",
                "description": "The port the python debugger (debugpy) should use.",
                "default": 5678
              },
              "pythonConfiguration": {
                "type": [
                  "object",
                  "string"
                ],
                "description": "Defines a template for the python launch configuration.",
                "default": {}
              },
              "languages": {
                "type": "array",
                "default": [],
                "items": {
                  "type": "string"
                },
                "markdownDescription": "Specifies the supported language(s) that can be used to write _robot_ files. Corresponds to the `--language lang *` option of __robot__."
              },
              "variables": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                },
                "default": {},
                "markdownDescription": "Specifies the variables for robotframework. Corresponds to the `--variable name:value` option of __robot__."
              },
              "variableFiles": {
                "type": "array",
                "default": [],
                "items": {
                  "type": "string"
                },
                "markdownDescription": "Specifies the variable files for robotframework. Corresponds to the `--variablefile path *` option of __robot__."
              },
              "include": {
                "type": "array",
                "default": [],
                "items": {
                  "type": "string"
                },
                "markdownDescription": "Specifies the tags that should be included in test run. Corresponds to the `--include tag * ` option of __robot__."
              },
              "exclude": {
                "type": "array",
                "default": [],
                "items": {
                  "type": "string"
                },
                "markdownDescription": "Specifies the tags that should be excluded in test run. Corresponds to the `--excluded tag *` option of __robot__."
              },
              "launcherArgs": {
                "type": "array",
                "description": "Extra command line arguments passed to launcher.",
                "default": []
              },
              "launcherTimeout": {
                "type": "number",
                "description": "Timeout the launcher waits for the debuggee.",
                "default": 10
              },
              "debuggerArgs": {
                "type": "array",
                "description": "Extra command line arguments passed to debugger.",
                "default": []
              },
              "debuggerTimeout": {
                "type": "number",
                "description": "Timeout the debugger waits for a client connection.",
                "default": 10
              },
              "robotCodeArgs": {
                "type": "array",
                "description": "Extra command line arguments passed to robotcode.",
                "default": []
              },
              "outputDir": {
                "type": "string",
                "default": null,
                "markdownDescription": "Specifies the output directory where robotframework saves output files. Corresponds to the `--outputdir` option of __robot__."
              },
              "outputMessages": {
                "type": "boolean",
                "description": "Output messages from robotframework in debug console.",
                "default": false
              },
              "outputLog": {
                "type": "boolean",
                "description": "Output log messages from robotframework in debug console.",
                "default": true
              },
              "outputTimestamps": {
                "type": "boolean",
                "description": "Include timestamps in log and output messages.",
                "default": false
              },
              "groupOutput": {
                "type": "boolean",
                "description": "Group start and stop suite/test/keyword messages in debug console.",
                "default": false
              },
              "mode": {
                "type": "string",
                "enum": [
                  "default",
                  "rpa",
                  "norpa"
                ],
                "markdownEnumDescriptions": [
                  "Mode is got from test/task header in data files.",
                  "Turn on the generic automation mode. Corresponds to the `--rpa` option of __robot__.",
                  "Force test automation mode. Corresponds to the `--norpa` option of __robot__."
                ],
                "description": "Specifies robot execution mode.",
                "default": "default"
              },
              "purpose": {
                "type": [
                  "array",
                  "string"
                ],
                "enum": [
                  "default",
                  "test",
                  "test-profile"
                ],
                "markdownEnumDescriptions": [
                  "Configuration is uses as default for all other configurations.",
                  "Default configuration for running or debugging tests.",
                  "Defines a test profile that you can select in the test explorer or via the play button during a test. This configuration is used instead of the configuration with the purpose `test`."
                ],
                "default": [],
                "description": "Defines what purpose this configuration has.",
                "items": {
                  "enum": [
                    "default",
                    "test",
                    "test-profile"
                  ],
                  "markdownEnumDescriptions": [
                    "Configuration is uses as default for all other configurations.",
                    "Default configuration for running or debugging tests.",
                    "Defines a test profile that you can select in the test explorer or via the play button during a test. This configuration is used instead of the configuration with the purpose `test`."
                  ]
                }
              },
              "openOutputAfterRun": {
                "type": "string",
                "enum": [
                  "none",
                  "report",
                  "log"
                ],
                "markdownEnumDescriptions": [
                  "Do not open anyting",
                  "Open the `report.html` file.",
                  "Open the `log.html` file."
                ],
                "default": "none",
                "description": "Defines if the report or log file should be opened after a run."
              }
            }
          }
        },
        "initialConfigurations": [
          {
            "name": "RobotCode: Run Current",
            "type": "robotcode",
            "request": "launch",
            "cwd": "${workspaceFolder}",
            "target": "${file}"
          },
          {
            "name": "RobotCode: Run All",
            "type": "robotcode",
            "request": "launch",
            "cwd": "${workspaceFolder}",
            "target": "."
          },
          {
            "name": "RobotCode: Default",
            "type": "robotcode",
            "request": "launch",
            "purpose": "default",
            "presentation": {
              "hidden": true
            },
            "attachPython": false,
            "pythonConfiguration": "RobotCode: Python"
          },
          {
            "name": "RobotCode: Python",
            "type": "debugpy",
            "request": "attach",
            "presentation": {
              "hidden": true
            }
          }
        ],
        "configurationSnippets": [
          {
            "label": "RobotCode: Run Current",
            "description": "Run the current RobotFramework file.",
            "body": {
              "name": "RobotCode: Run Current",
              "type": "robotcode",
              "request": "launch",
              "cwd": "^\"\\${workspaceFolder}\"",
              "target": "^\"\\${file}\""
            }
          },
          {
            "label": "RobotCode: Run All",
            "description": "Run all RobotFramework files.",
            "body": {
              "name": "RobotCode: Run All",
              "type": "robotcode",
              "request": "launch",
              "cwd": "^\"\\${workspaceFolder}\"",
              "target": "."
            }
          },
          {
            "label": "RobotCode: Test",
            "description": "Run or debug tests from test explorer.",
            "body": {
              "name": "RobotCode: Test",
              "type": "robotcode",
              "request": "launch",
              "presentation": {
                "hidden": true
              },
              "purpose": "test"
            }
          },
          {
            "label": "RobotCode: Test Profile",
            "description": "Create a new test profile that is displayed in the test explorer.",
            "body": {
              "name": "RobotCode: Test Profile",
              "type": "robotcode",
              "request": "launch",
              "presentation": {
                "hidden": true
              },
              "purpose": "test-profile"
            }
          },
          {
            "label": "RobotCode: Default",
            "description": "Default configuration.",
            "body": {
              "name": "RobotCode: Default",
              "type": "robotcode",
              "request": "launch",
              "presentation": {
                "hidden": true
              },
              "purpose": "default"
            }
          },
          {
            "label": "RobotCode: Default",
            "description": "Default configuration.",
            "body": {
              "name": "RobotCode: Default",
              "type": "robotcode",
              "request": "launch",
              "presentation": {
                "hidden": true
              },
              "purpose": "default"
            }
          },
          {
            "label": "RobotCode: Remote-Attach",
            "description": "Attach to a running remote debug server.",
            "body": {
              "name": "RobotCode: Remote-Attach",
              "type": "robotcode",
              "request": "attach",
              "connect": {
                "host": "localhost",
                "port": 6612
              },
              "pathMappings": [
                {
                  "localRoot": "^\"\\${workspaceFolder}\"",
                  "remoteRoot": "."
                }
              ]
            }
          }
        ]
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run esbuild-base -- --minify",
    "esbuild-base": "esbuild ./vscode-client/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
    "esbuild": "npm run esbuild-base -- --sourcemap",
    "esbuild-watch": "npm run esbuild-base -- --sourcemap --watch",
    "test-compile": "tsc -p ./",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint --ext .ts,.tsx,.js .",
    "lint-fix": "eslint --ext .ts,.tsx,.js --fix .",
    "test": "node ./out/test/runTest.js",
    "docs:install": "npm -C docs install",
    "docs:dev": "npm -w docs run dev",
    "docs:build": "npm -w docs run build",
    "docs:preview": "npm -w docs run preview"
  },
  "extensionDependencies": [
    "ms-python.python",
    "ms-python.debugpy"
  ],
  "dependencies": {
    "@vscode/python-extension": "^1.0.5",
    "ansi-colors": "^4.1.3",
    "vscode-languageclient": "^9.0.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.5.0",
    "@types/node": "^20.14.5",
    "@types/vscode": "^1.86.0",
    "@vscode/test-electron": "^2.4.0",
    "@vscode/vsce": "^2.27.0",
    "esbuild": "^0.21.5",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-import": "^2.29.1",
    "eslint-plugin-prettier": "^5.1.3",
    "ovsx": "^0.9.1",
    "prettier": "^3.3.2",
    "ts-loader": "^9.5.1",
    "typescript": "^5.4.5",
    "typescript-eslint": "^7.13.1"
  },
  "workspaces": [
    "docs"
  ]
}
