[version]
path = "src/robotcode/cli/__version__.py"

[build]
dev-mode-dirs = ["src"]

[build.targets.wheel]
only-include = ["src/robotcode"]
sources = ["src"]

[build.targets.sdist]
only-include = ["src", "CHANGELOG.md"]


[envs.default]
installer = "uv"
dependencies = [
  "pytest",
  "pytest-html",
  "pytest_asyncio>=0.23",
  "pytest-rerunfailures",
  "pytest-cov",
  "mypy",
  "ruff",
  "debugpy",
  "GitPython",
  "semantic-version",
  "robotremoteserver",
  "apischema",
]
features = ["all"]
pre-install-commands = ["install-packages"]


[envs.default.scripts]
cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=robotcode --cov=tests {args}"
no-cov = "cov --no-cov {args}"
test = "pytest {args}"
test-reset = "pytest --regtest2-reset {args}"
create-json-schema = "python ./scripts/create_robot_toml_json_schema.py"
generate-rf-options = "python ./scripts/generate_rf_options.py"
install-packages = "python ./scripts/install_packages.py"
generate-tmlanguage = "python ./scripts/generate_tmlanguage.py"

[envs.rfbeta]
python = "3.13"
extra-dependencies = ["robotframework==7.2rc1"]

[envs.rfmaster]
python = "3.12"
extra-dependencies = [
  "robotframework @ git+https://github.com/robotframework/robotframework.git",
]

[envs.rfdevel]
python = "3.11"
post-install-commands = ["pip install -U -e {root:uri}/../robotframework"]

[envs.rfdevel38]
python = "3.8"
post-install-commands = ["pip install -U -e {root:uri}/../robotframework"]

[envs.devel]
python = "3.10"

[[envs.devel.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]
rf = ["rf50", "rf60", "rf61", "rf70", "rf71", "rf72", "rf73"]

[envs.devel.overrides]
matrix.rf.dependencies = [
  { value = "robotframework~=5.0.0", if = [
    "rf50",
  ] },
  { value = "robotframework~=6.0.0", if = [
    "rf60",
  ] },
  { value = "robotframework~=6.1.0", if = [
    "rf61",
  ] },
  { value = "robotframework~=7.0.0", if = [
    "rf70",
  ] },
  { value = "robotframework~=7.1.0", if = [
    "rf71",
  ] },
  { value = "robotframework~=7.2.0", if = [
    "rf72",
  ] },
  { value = "robotframework~=7.3.0", if = [
    "rf73",
  ] },
]

[envs.hatch-test]
dependencies = ["pytest", "pytest-html", "pytest_asyncio>=0.23", "pyyaml"]
pre-install-commands = ["python ./scripts/install_packages.py"]

[[envs.test.matrix]]
rf = ["rf50", "rf60", "rf61", "rf70", "rf71", "rf72", "rf73"]

[envs.test.overrides]
matrix.rf.dependencies = [
  { value = "robotframework~=5.0.0", if = [
    "rf50",
  ] },
  { value = "robotframework~=6.0.0", if = [
    "rf60",
  ] },
  { value = "robotframework~=6.1.0", if = [
    "rf61",
  ] },
  { value = "robotframework~=7.0.0", if = [
    "rf70",
  ] },
  { value = "robotframework~=7.1.0", if = [
    "rf71",
  ] },
  { value = "robotframework~=7.2.0", if = [
    "rf72",
  ] },
  { value = "robotframework~=7.3.0", if = [
    "rf73",
  ] },
]

[envs.lint]
python = "3.10"
#skip-install = true
#extra-dependencies = ["tomli>=2.0.0"]
extra-dependencies = [
  "types-PyYAML",
  "types-Pygments",
  "types-colorama",
  "types-docutils",
  "types-setuptools",
]
features = ["all"]


[envs.lint.scripts]
typing = "mypy --no-incremental --cache-dir /dev/null {args:.}"
style = ["ruff check .", "ruff format --diff ."]
all = ["style", "typing"]

[envs.lint.overrides]
platform.windows.scripts = [
  "typing-py=mypy --no-incremental --cache-dir nul {args:.}",
]


[envs.build]
skip-install = true
detached = true
python = "3.10"
dependencies = ["GitPython", "semantic-version", "commitizen", "git-cliff"]

[envs.build.scripts]
update-changelog = ["python scripts/update_changelog.py"]
update-git-versions = ["python scripts/update_git_versions.py"]
update-doc-links = ["python scripts/update_doc_links.py"]
package = ["python scripts/package.py"]
publish = ["python scripts/publish.py"]
extract-release-notes = ["python scripts/extract_release_notes.py"]
is-prerelease = ["python scripts/is_prerelease.py"]
get-release-version = ["python scripts/get_release_version.py"]
bump = ["cz bump {args}"]
install-bundled-editable = "python ./scripts/install_bundled_editable.py"


[envs.hatch-static-analysis]
installer = "uv"
dependencies = ["ruff"]

[envs.hatch-static-analysis.scripts]
format-check = ["ruff format --check --diff {args:.}"]
format-fix = ["ruff format {args:.}"]
lint-check = ["ruff check {args:.}"]
lint-fix = "ruff check --fix {args:.}"
